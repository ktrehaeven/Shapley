cabs:
  initialise_sigma_spectrum:
    name: initialise_sigma_spectrum
    flavour: python-code
    command: |
      from daskms import xds_from_ms, xds_to_table
      import dask.array as da
      xdsl = xds_from_ms(ms,columns=("WEIGHT_SPECTRUM",),group_cols=("DATA_DESC_ID", "SCAN_NUMBER", "FIELD_ID"))
      out_xdsl = []
      for xds in xdsl:
        ws = xds.WEIGHT_SPECTRUM.data
        ss = da.sqrt(1/ws)
        out_xds = xds.assign({"SIGMA_SPECTRUM": (("row", "chan", "corr"), ss)})
        out_xdsl.append(out_xds)
      writes = xds_to_table(out_xdsl, ms, columns=("SIGMA_SPECTRUM",))
      da.compute(writes, scheduler="sync")
    inputs:
      ms:
        dtype: Union[MS, List[MS]]

  replace_masked_reg:
    name: replace_masked_reg
    flavour: python-code
    command: |
      from astropy.io import fits
      import pyregion
      import numpy as np

      data_tight = fits.getdata(mask1)
      hdu = fits.open(mask1)[0]
      header = hdu.header

      data_loose = fits.getdata(mask2)

      regions_list = reg_file
      with open(regions_list,'r') as reg:
        for line in reg:
          if 'box(' in line:
            dimensions = line[4:-2]
            dim_list = dimensions.split(",")
            centre_x = int(float(dim_list[0]))
            centre_y = int(float(dim_list[1]))
            delta_x = int(float(dim_list[2]))
            delta_y = int(float(dim_list[3]))

            data_tight[:, :, centre_y-int(delta_y/2):centre_y+int(delta_y/2), centre_x-int(delta_x/2):centre_x+int(delta_x/2)] = data_loose[:, :, centre_y-int(delta_y/2):centre_y+int(delta_y/2), centre_x-int(delta_x/2):centre_x+int(delta_x/2)]

      fits.writeto(outname, data_tight, header, overwrite=True)
    inputs:
      mask1:
        dtype: File
      mask2:
        dtype: File
      reg_file:
        dtype: File
      outname:
        dtype: str

